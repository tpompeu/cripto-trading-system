#!/usr/bin/env python3
"""
Script para configurar par√¢metros no AWS Systems Manager Parameter Store.

Este script l√™ o arquivo config.json e cria/atualiza os par√¢metros necess√°rios
no Parameter Store para o sistema de trading funcionar corretamente.

Uso:
    python3 setup_parameters.py [--dry-run] [--region us-east-1] [--profile PROFILE]
"""

import argparse
import json
import sys
from typing import Dict, Any

import boto3
from botocore.exceptions import ClientError


class ParameterStoreManager:
    """Gerencia par√¢metros no AWS Systems Manager Parameter Store."""
    
    def __init__(self, region: str = 'us-east-1', dry_run: bool = False, profile: str = None):
        """
        Inicializa o gerenciador de par√¢metros.
        
        Args:
            region: Regi√£o AWS
            dry_run: Se True, apenas mostra o que seria feito sem executar
            profile: Perfil AWS CLI a ser usado
        """
        self.region = region
        self.dry_run = dry_run
        self.profile = profile
        
        if not dry_run:
            if profile:
                session = boto3.Session(profile_name=profile, region_name=region)
                self.ssm_client = session.client('ssm')
            else:
                self.ssm_client = boto3.client('ssm', region_name=region)
        
        print(f"ParameterStoreManager inicializado - Regi√£o: {region}, Dry Run: {dry_run}, Profile: {profile or 'default'}")
    
    def load_config(self, config_file: str = 'config.json') -> Dict[str, Any]:
        """
        Carrega configura√ß√µes do arquivo JSON.
        
        Args:
            config_file: Caminho para o arquivo de configura√ß√£o
            
        Returns:
            Dicion√°rio com as configura√ß√µes
        """
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            print(f"‚úì Configura√ß√£o carregada de {config_file}")
            return config
        except FileNotFoundError:
            print(f"‚ùå Arquivo {config_file} n√£o encontrado")
            sys.exit(1)
        except json.JSONDecodeError as e:
            print(f"‚ùå Erro ao decodificar JSON: {e}")
            sys.exit(1)
    
    def put_parameter(self, name: str, value: str, parameter_type: str = 'String', 
                     description: str = '', overwrite: bool = True) -> bool:
        """
        Cria ou atualiza um par√¢metro no Parameter Store.
        
        Args:
            name: Nome do par√¢metro
            value: Valor do par√¢metro
            parameter_type: Tipo do par√¢metro (String, StringList, SecureString)
            description: Descri√ß√£o do par√¢metro
            overwrite: Se deve sobrescrever par√¢metros existentes
            
        Returns:
            True se bem-sucedido, False caso contr√°rio
        """
        if self.dry_run:
            print(f"[DRY RUN] Criaria par√¢metro: {name} = {value[:50]}...")
            return True
        
        try:
            # Primeiro, verifica se o par√¢metro j√° existe
            try:
                self.ssm_client.get_parameter(Name=name, WithDecryption=False)
                parameter_exists = True
            except ClientError as e:
                if e.response['Error']['Code'] == 'ParameterNotFound':
                    parameter_exists = False
                else:
                    raise e
            
            if parameter_exists:
                # Se o par√¢metro existe, atualiza sem tags
                self.ssm_client.put_parameter(
                    Name=name,
                    Value=value,
                    Type=parameter_type,
                    Description=description,
                    Overwrite=True
                )
                print(f"‚úì Par√¢metro atualizado: {name}")
                
                # Adiciona tags separadamente se necess√°rio
                try:
                    self.ssm_client.add_tags_to_resource(
                        ResourceType='Parameter',
                        ResourceId=name,
                        Tags=[
                            {'Key': 'Project', 'Value': 'CryptoTradingSystem'},
                            {'Key': 'Environment', 'Value': 'Production'},
                            {'Key': 'ManagedBy', 'Value': 'setup_parameters.py'}
                        ]
                    )
                    print(f"‚úì Tags adicionadas ao par√¢metro: {name}")
                except ClientError as e:
                    print(f"‚ö†Ô∏è  N√£o foi poss√≠vel adicionar tags ao par√¢metro {name}: {e}")
                    
            else:
                # Se o par√¢metro n√£o existe, cria com tags
                self.ssm_client.put_parameter(
                    Name=name,
                    Value=value,
                    Type=parameter_type,
                    Description=description,
                    Overwrite=False,
                    Tags=[
                        {
                            'Key': 'Project',
                            'Value': 'CryptoTradingSystem'
                        },
                        {
                            'Key': 'Environment',
                            'Value': 'Production'
                        },
                        {
                            'Key': 'ManagedBy',
                            'Value': 'setup_parameters.py'
                        }
                    ]
                )
                print(f"‚úì Par√¢metro criado: {name}")
                
            return True
            
        except ClientError as e:
            print(f"‚ùå Erro ao criar/atualizar par√¢metro {name}: {e}")
            return False
    
    def setup_trading_parameters(self, config: Dict[str, Any]) -> bool:
        """
        Configura todos os par√¢metros necess√°rios para o sistema de trading.
        
        Args:
            config: Dicion√°rio com as configura√ß√µes
            
        Returns:
            True se todos os par√¢metros foram criados com sucesso
        """
        success = True
        
        # Determina o nome do bucket S3 baseado na conta AWS
        try:
            if not self.dry_run:
                if self.profile:
                    session = boto3.Session(profile_name=self.profile, region_name=self.region)
                    sts_client = session.client('sts')
                else:
                    sts_client = boto3.client('sts', region_name=self.region)
                
                account_id = sts_client.get_caller_identity()['Account']
                data_bucket = f"{config['aws_resources']['data_bucket_prefix']}-{account_id}-{self.region}"
            else:
                data_bucket = f"{config['aws_resources']['data_bucket_prefix']}-123456789012-{self.region}"
        except Exception as e:
            print(f"‚ùå Erro ao obter Account ID: {e}")
            data_bucket = f"{config['aws_resources']['data_bucket_prefix']}-default-{self.region}"
        
        # Lista de par√¢metros para criar
        parameters = [
            # Configura√ß√µes b√°sicas do sistema
            {
                'name': '/trading_system/data_bucket',
                'value': data_bucket,
                'description': 'Nome do bucket S3 para armazenamento de dados'
            },
            {
                'name': '/trading_system/symbols',
                'value': json.dumps(config['trading_config']['symbols']),
                'description': 'Lista de s√≠mbolos de criptomoedas para trading'
            },
            {
                'name': '/trading_system/timeframes',
                'value': json.dumps(config['trading_config']['timeframes']),
                'description': 'Lista de timeframes para coleta de dados'
            },
            {
                'name': '/trading_system/lookback_days',
                'value': str(config['trading_config']['lookback_days']),
                'description': 'N√∫mero de d√≠as de hist√≥rico para baixar'
            },
            
            # Configura√ß√µes da API Binance
            {
                'name': '/trading_system/binance/base_url',
                'value': config['binance_api']['base_url'],
                'description': 'URL base da API da Binance'
            },
            {
                'name': '/trading_system/binance/rate_limit',
                'value': str(config['binance_api']['rate_limit_requests_per_minute']),
                'description': 'Limite de requisi√ß√µes por minuto da API Binance'
            },
            {
                'name': '/trading_system/binance/max_retries',
                'value': str(config['binance_api']['max_retries']),
                'description': 'N√∫mero m√°ximo de tentativas para requisi√ß√µes'
            },
            
            # Configura√ß√µes de processamento de dados
            {
                'name': '/trading_system/data/file_formats',
                'value': json.dumps(config['data_processing']['file_formats']),
                'description': 'Formatos de arquivo para salvar dados'
            },
            {
                'name': '/trading_system/data/retention_days',
                'value': str(config['data_processing']['data_retention_days']),
                'description': 'Dias de reten√ß√£o de dados no S3'
            },
            
            # Configura√ß√µes de monitoramento
            {
                'name': '/trading_system/monitoring/log_level',
                'value': config['monitoring']['log_level'],
                'description': 'N√≠vel de logging do sistema'
            },
            {
                'name': '/trading_system/monitoring/log_retention_days',
                'value': str(config['monitoring']['cloudwatch_log_retention_days']),
                'description': 'Dias de reten√ß√£o de logs no CloudWatch'
            }
        ]
        
        # Cria todos os par√¢metros
        print(f"\nüìù Configurando {len(parameters)} par√¢metros...")
        for param in parameters:
            if not self.put_parameter(
                name=param['name'],
                value=param['value'],
                description=param['description']
            ):
                success = False
        
        return success
    
    def setup_secure_parameters(self) -> bool:
        """
        Configura par√¢metros seguros (SecureString) para credenciais.
        
        Nota: As credenciais da Binance devem ser configuradas manualmente
        por quest√µes de seguran√ßa.
        
        Returns:
            True se bem-sucedido
        """
        print("\nüîê Configurando par√¢metros seguros...")
        
        # Par√¢metros seguros que devem ser configurados manualmente
        secure_params = [
            '/trading_system/binance/api_key',
            '/trading_system/binance/api_secret'
        ]
        
        if self.dry_run:
            for param in secure_params:
                print(f"[DRY RUN] Par√¢metro seguro deve ser configurado manualmente: {param}")
            return True
        
        # Verifica se os par√¢metros seguros j√° existem
        existing_params = []
        for param in secure_params:
            try:
                self.ssm_client.get_parameter(Name=param, WithDecryption=False)
                existing_params.append(param)
                print(f"‚úì Par√¢metro seguro j√° existe: {param}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'ParameterNotFound':
                    print(f"‚ö†Ô∏è  Par√¢metro seguro n√£o encontrado: {param}")
                else:
                    print(f"‚ùå Erro ao verificar par√¢metro {param}: {e}")
        
        # Instru√ß√µes para configura√ß√£o manual
        if len(existing_params) < len(secure_params):
            print("\nüìã INSTRU√á√ïES PARA CONFIGURA√á√ÉO MANUAL:")
            print("Execute os comandos abaixo para configurar as credenciais da Binance:")
            print()
            
            for param in secure_params:
                if param not in existing_params:
                    param_name = param.split('/')[-1].upper()
                    profile_flag = f" --profile {self.profile}" if self.profile else ""
                    region_flag = f" --region {self.region}" if self.region != 'us-east-1' else ""
                    
                    print(f"aws ssm put-parameter{profile_flag}{region_flag} \\")
                    print(f"  --name '{param}' \\")
                    print(f"  --value 'SUA_{param_name}_AQUI' \\")
                    print(f"  --type 'SecureString' \\")
                    print(f"  --description 'Credencial da Binance - {param_name}' \\")
                    print(f"  --tags 'Key=Project,Value=CryptoTradingSystem' 'Key=Environment,Value=Production' 'Key=ManagedBy,Value=setup_parameters.py'")
                    print()
        
        return True
    
    def verify_parameters(self, config: Dict[str, Any]) -> bool:
        """
        Verifica se todos os par√¢metros foram criados corretamente.
        
        Args:
            config: Configura√ß√£o original
            
        Returns:
            True se todos os par√¢metros est√£o corretos
        """
        if self.dry_run:
            print("\n[DRY RUN] Verifica√ß√£o de par√¢metros seria executada")
            return True
        
        print("\nüîç Verificando par√¢metros criados...")
        
        # Lista de par√¢metros para verificar
        params_to_check = [
            '/trading_system/data_bucket',
            '/trading_system/symbols',
            '/trading_system/timeframes',
            '/trading_system/lookback_days'
        ]
        
        all_good = True
        for param_name in params_to_check:
            try:
                response = self.ssm_client.get_parameter(Name=param_name)
                value = response['Parameter']['Value']
                print(f"‚úì {param_name}: {value[:50]}...")
            except ClientError as e:
                print(f"‚ùå Erro ao verificar {param_name}: {e}")
                all_good = False
        
        return all_good


def main():
    """Fun√ß√£o principal do script."""
    parser = argparse.ArgumentParser(
        description='Configura par√¢metros no AWS Systems Manager Parameter Store'
    )
    parser.add_argument(
        '--dry-run', 
        action='store_true',
        help='Mostra o que seria feito sem executar'
    )
    parser.add_argument(
        '--region',
        default='us-east-1',
        help='Regi√£o AWS (padr√£o: us-east-1)'
    )
    parser.add_argument(
        '--profile',
        default=None,
        help='Perfil AWS CLI a ser usado (opcional)'
    )
    parser.add_argument(
        '--config',
        default='config.json',
        help='Arquivo de configura√ß√£o (padr√£o: config.json)'
    )
    
    args = parser.parse_args()
    
    print("üöÄ Configurador de Par√¢metros do Sistema de Trading")
    print("=" * 50)
    
    # Inicializa o gerenciador
    manager = ParameterStoreManager(
        region=args.region, 
        dry_run=args.dry_run, 
        profile=args.profile
    )
    
    # Carrega configura√ß√µes
    config = manager.load_config(args.config)
    
    # Configura par√¢metros
    success = True
    
    # Par√¢metros b√°sicos
    if not manager.setup_trading_parameters(config):
        success = False
    
    # Par√¢metros seguros
    if not manager.setup_secure_parameters():
        success = False
    
    # Verifica√ß√£o
    if not manager.verify_parameters(config):
        success = False
    
    # Resultado final
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ Configura√ß√£o conclu√≠da com sucesso!")
        if not args.dry_run:
            print("\nüìù PR√ìXIMOS PASSOS:")
            print("1. Configure as credenciais da Binance manualmente (veja instru√ß√µes acima)")
            print("2. Execute o deploy da infraestrutura atualizada")
            print("3. Teste a fun√ß√£o Lambda data_downloader")
    else:
        print("‚ùå Configura√ß√£o conclu√≠da com erros!")
        sys.exit(1)


if __name__ == '__main__':
    main()