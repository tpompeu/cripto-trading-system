version: 0.2

env:
  variables:
    BUILD_TIMESTAMP: $(date +%Y%m%d%H%M%S)
    GIT_COMMIT: $(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-8)

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - echo "Installing dependencies..."
      - pip install --upgrade pip
      - pip install -r requirements.txt

  pre_build:
    commands:
      - echo "Pre-build phase started on $(date)"
      - echo "Build timestamp: ${BUILD_TIMESTAMP}"
      - echo "Git commit: ${GIT_COMMIT}"
      - echo "Validating CloudFormation templates..."
      - aws cloudformation validate-template --template-body file://infra/main.yaml
      - aws cloudformation validate-template --template-body file://infra/iam.yaml
      - aws cloudformation validate-template --template-body file://infra/storage.yaml
      - aws cloudformation validate-template --template-body file://infra/network.yaml
      - aws cloudformation validate-template --template-body file://infra/processing.yaml

  build:
    commands:
      - echo "Build phase started on $(date)"
      - echo "Creating directory for Lambda code packages"
      - mkdir -p lambda-code
      - echo "Packaging data_downloader..."
      - cd src && zip -r ../lambda-code/data_downloader-${GIT_COMMIT}.zip data_downloader.py config_service.py && cd ..
      - echo "Packaging orchestrator..."
      - cd src && zip -r ../lambda-code/orchestrator-${GIT_COMMIT}.zip orchestrator.py config_service.py && cd ..
      - echo "Packaging launch_spot_validator..."
      - cd src && zip -r ../lambda-code/launch_spot_validator-${GIT_COMMIT}.zip launch_spot_validator.py config_service.py && cd ..
      - echo "Packaging initiate_validation_window..."
      - cd src && zip -r ../lambda-code/initiate_validation_window-${GIT_COMMIT}.zip initiate_validation_window.py config_service.py && cd ..
      - echo "Packaging model_retrainer..."
      - cd src && zip -r ../lambda-code/model_retrainer-${GIT_COMMIT}.zip model_retrainer.py config_service.py model_validator.py && cd ..
      - echo "Packaging config_service..."
      - cd src && zip -r ../lambda-code/config_service-${GIT_COMMIT}.zip config_service.py && cd ..
      - echo "Adding processing modules to required lambdas..."
      - cd src && zip -r ../lambda-code/model_retrainer-${GIT_COMMIT}.zip data_processor.py data_validator.py feature_engineering.py model_trainer.py monte_carlo_validator.py performance_monitor.py risk_monitor.py shap_analyzer.py strategy_evaluator.py walk_forward_validator.py && cd ..
      - cd src && zip -r ../lambda-code/orchestrator-${GIT_COMMIT}.zip data_processor.py data_validator.py feature_engineering.py && cd ..
      - echo "Uploading Lambda code packages to S3..."
      - aws s3 cp lambda-code/ s3://${ARTIFACTS_BUCKET}/lambda-code/ --recursive
      - echo "Creating parameters file..."
      - echo '[' > parameters.json
      - echo '  {"ParameterKey": "ProjectName", "ParameterValue": "CryptoTradingSystem"},' >> parameters.json
      - echo '  {"ParameterKey": "ArtifactsBucket", "ParameterValue": "'"${ARTIFACTS_BUCKET}"'"},' >> parameters.json
      - echo '  {"ParameterKey": "CodeVersion", "ParameterValue": "'"${GIT_COMMIT}"'"}' >> parameters.json
      - echo ']' >> parameters.json
      - echo "Packaging CloudFormation templates..."
      - aws cloudformation package --template-file infra/main.yaml --s3-bucket ${ARTIFACTS_BUCKET} --s3-prefix "cloudformation-templates" --output-template-file packaged-main.yaml
      - aws cloudformation package --template-file infra/iam.yaml --s3-bucket ${ARTIFACTS_BUCKET} --s3-prefix "cloudformation-templates" --output-template-file packaged-iam.yaml
      - aws cloudformation package --template-file infra/storage.yaml --s3-bucket ${ARTIFACTS_BUCKET} --s3-prefix "cloudformation-templates" --output-template-file packaged-storage.yaml
      - aws cloudformation package --template-file infra/network.yaml --s3-bucket ${ARTIFACTS_BUCKET} --s3-prefix "cloudformation-templates" --output-template-file packaged-network.yaml
      - aws cloudformation package --template-file infra/processing.yaml --s3-bucket ${ARTIFACTS_BUCKET} --s3-prefix "cloudformation-templates" --output-template-file packaged-processing.yaml

  post_build:
    commands:
      - echo "Post-build phase started on $(date)"
      - echo "Build completed successfully"

artifacts:
  files:
    - packaged-*.yaml
    - parameters.json
    - config.json
    - setup_parameters.py
  name: CryptoTradingSystemArtifacts
